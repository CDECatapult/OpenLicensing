# todo: we need to work through all of this

ol:chosen_sequentially a ol:AssetSetSelectorPolicy,
        skos:Concept ;
    dc:description "chosen according to a predefined order"@en ;
    skos:inScheme ol:AssetSetSelectorPolicies ;
    skos:name "chosen_sequentially"@en ;
    skos:narrowerThan ol:any_sample_policy .

ol:randomly_chosen a ol:AssetSetSelectorPolicy,
        skos:Concept ;
    dc:description "chosen in an arbitrary manner not controller by assignee or assigner"@en ;
    skos:inScheme ol:AssetSetSelectorPolicies ;
    skos:name "randomly_chosen"@en ;
    skos:narrowerThan ol:any_sample_policy .

ol:selected_by_assignee a ol:AssetSetSelectorPolicy,
        skos:Concept ;
    dc:description "chosen by the assignee party"@en ;
    skos:inScheme ol:AssetSetSelectorPolicies ;
    skos:name "selected_by_assignee"@en ;
    skos:narrowerThan ol:any_sample_policy .

ol:selected_by_assigner a ol:AssetSetSelectorPolicy,
        skos:Concept ;
    dc:description "chosen by the assigner party"@en ;
    skos:inScheme ol:AssetSetSelectorPolicies ;
    skos:name "selected_by_assigner"@en ;
    skos:narrowerThan ol:any_sample_policy .

ol:AssetSetSelector_count a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    dc:description """Default value is 1. A negative value -n can be used to mean "all the assets but n"."""@en ;
    rdfs:domain ol:AssetSetSelector ;
    rdfs:isDefinedBy <http://openlicensing.org/ns/ol/1.1/> ;
    rdfs:range xsd:integer .

ol:fromSet a owl:FunctionalProperty,
        owl:ObjectProperty ;
    dc:description """The set asset can be picked from."""@en ;
    rdfs:domain ol:AssetSetSelector ;
    rdfs:isDefinedBy <http://openlicensing.org/ns/ol/1.1/> ;
    rdfs:range ol:AssetSet .


ol:samplePolicy a owl:FunctionalProperty,
        owl:ObjectProperty ;
    dc:description """The way asset are selected. Default is selected_by_assignee."""@en ;
    rdfs:domain ol:AssetSetSelector ;
    rdfs:isDefinedBy <http://openlicensing.org/ns/ol/1.1/> ;
    rdfs:range ol:AssetSetSelectorPolicy .


ol:AssetSetSelector a [ a owl:Restriction ;
            owl:allValuesFrom ol:AssetSet ;
            owl:cardinality 1 ;
            owl:onProperty ol:fromSet ],
        [ a owl:Restriction ;
            owl:cardinality 1 ;
            owl:onProperty ol:AssetSetSelector_count ],
        [ a owl:Restriction ;
            owl:allValuesFrom ol:AssetSetSelectorPolicy ;
            owl:cardinality 1 ;
            owl:onProperty ol:samplePolicy ],
        owl:Class ;
    rdfs:label "AssetSetSelector"^^xsd:string ;
    dc:description """
An asset that is actually sampled from a set. An AssetSetSelector must indicate the set asset must be selected from, muay contain a sample policy,  and may contain the number of 
asset that must be sampled. 
"""@en ;
    rdfs:isDefinedBy <http://openlicensing.org/ns/ol/1.1/> ;
    rdfs:subClassOf ol:Asset .


ol:AssetSetSelectorPolicies a skos:ConceptScheme ;
    skos:ConceptScheme_hasTopConcept ol:any_sample_policy .

ol:any_sample_policy a ol:AssetSetSelectorPolicy,
        skos:Concept ;
    skos:inScheme ol:AssetSetSelectorPolicies ;
    skos:name "any_sample_policy"@en .

ol:AssetSet a owl:Class ;
    rdfs:label "AssetSet"^^xsd:string ;
    dc:description """A set defined as the set of element pointing to a target object via a certain predicate."""@en,
        """A set or collection of elements of type elementType"""@en ;
    rdfs:isDefinedBy <http://openlicensing.org/ns/ol/1.1/> ;
    rdfs:subClassOf ol:Asset,
        ol:AssetSet .

ol:AssetSetSelectorPolicy a owl:Class ;
    rdfs:label "AssetSetSelectorPolicy"^^xsd:string ;
    dc:description """Indicates the way sampling from a set is done."""@en ;
    rdfs:isDefinedBy <http://openlicensing.org/ns/ol/1.1/> .

